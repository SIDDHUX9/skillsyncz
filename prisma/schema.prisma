// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String?
  avatarUrl       String?
  isIdVerified    Boolean  @default(false)
  karma           Int      @default(0)
  credits         Int      @default(100) // Start with 100 credits
  language        String   @default("en")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  ownedSkills     Skill[]     @relation("UserSkills")
  bookingsAsLearner Booking[]
  reviews         Review[]
  creditTxns      CreditTxn[]
  communityProjects CommunityProject[]
  projectVolunteers ProjectVolunteer[]
}

model Skill {
  id          String      @id @default(cuid())
  ownerId     String
  title       String
  description String
  category    SkillCategory
  priceCredits Int
  lat         Float
  lng         Float
  avgRating   Float       @default(0)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  owner       User        @relation("UserSkills", fields: [ownerId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  reviews     Review[]
  calLink     CalLink?
}

model Booking {
  id         String       @id @default(cuid())
  skillId    String
  learnerId  String
  startTime  DateTime
  endTime    DateTime
  status     BookingStatus @default(BOOKED)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  
  // Relations
  skill      Skill        @relation(fields: [skillId], references: [id], onDelete: Cascade)
  learner    User         @relation(fields: [learnerId], references: [id], onDelete: Cascade)
  reviews    Review[]
  chatRoom   ChatRoom?
}

model Review {
  id        String   @id @default(cuid())
  skillId   String
  reviewerId String
  bookingId String
  stars     Int
  comment   String?
  isFlagged Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  skill     Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  reviewer  User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  
  @@unique([skillId, reviewerId])
}

model CommunityProject {
  id               String   @id @default(cuid())
  creatorId        String
  title            String
  description      String
  maxVolunteers    Int
  currentVolunteers Int     @default(0)
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  creator          User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  volunteers       ProjectVolunteer[]
}

model CreditTxn {
  id        String       @id @default(cuid())
  userId    String
  amount    Int
  type      CreditType
  refId     String?      // Reference to booking, review, etc.
  message   String?
  createdAt DateTime     @default(now())
  
  // Relations
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalLink {
  id         String @id @default(cuid())
  skillId    String @unique
  calComSlug String
  
  // Relations
  skill      Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
}

model ChatRoom {
  id         String   @id @default(cuid())
  bookingId  String   @unique
  dailyCoUrl String?
  createdAt  DateTime @default(now())
  
  // Relations
  booking    Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  messages   Message[]
}

model Message {
  id        String   @id @default(cuid())
  roomId    String
  senderId  String
  text      String?
  fileUrl   String?
  createdAt DateTime @default(now())
  
  // Relations
  chatRoom  ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model ProjectVolunteer {
  id                String   @id @default(cuid())
  projectId         String
  userId            String
  joinedAt          DateTime @default(now())
  
  // Relations
  project           CommunityProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
}

enum SkillCategory {
  ACADEMIC
  ARTS
  BUSINESS
  COOKING
  FITNESS
  LANGUAGE
  MUSIC
  TECH
  TRADES
  OTHER
}

enum BookingStatus {
  BOOKED
  COMPLETED
  CANCELLED
}

enum CreditType {
  EARNED
  SPENT
  DONATED
}